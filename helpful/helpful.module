<?php

/**
 * @file
 * HELPFUL module
 *
 * Many helpful functions for use throughout the system.
 */


/**
 * Implementation of hook_menu()
 *
 * @return
 *		array of menu items
 */
function helpful_menu() {
	$items = array();
	
	$items['helpful/form/states'] = array(
		'type' => MENU_CALLBACK,
		'page callback' => 'helpful_form_states',
		'access callback' => true
	);
	$items['helpful/form/provinces'] = array(
		'type' => MENU_CALLBACK,
		'page callback' => 'helpful_form_provinces',
		'access callback' => true
	);
	$items['helpful/testcurl'] = array(
		'type' => MENU_CALLBACK,
		'page callback' => 'helpful_testcurl',
		'access callback' => true		
	);
	
	return $items;
}


/**
 * A fancier wrapper for var_dump();
 *
 * @param mixed $v
 *		The item you want to var_dump();
 * @param string $label
 *		(optional) A label for this item
 */
function helpful_debug($v, $label = '') {

	$bgcolors = array('fff', 'ccf', 'cfc', 'fcc', 'ffc', 'cff', 'fcf', 'ccc');
	shuffle($bgcolors);

	echo '<div style="border: 1px solid black; padding: 10px; margin: 10px; background-color: #' . end($bgcolors) . '">';
	if ($label) echo '<strong>' . $label . '</strong>';
	echo '<pre>'; var_dump($v); echo '</pre>';
	echo '</div>';
}


/**
 * A wrapper for cleaning user input. trim(strip_tags($v))
 *
 * @param string $v
 *		The string to be cleaned
 *
 * @return string
 *		The cleaned string
 */
function helpful_clean($v) {
	return trim(strip_tags($v));
}


/**
 * A wrapper for cleaning an array of user input.
 *
 * @param array $a
 *		The array of user input to be cleaned
 *
 * @return array
 *		The array of cleaned strings
 */
function helpful_clean_array($a) {
	$b = array();
	foreach ($a as $key => $value) {
		if (is_array($value)) {
			$b[$key] = helpful_clean_array($value);
		} else {
			$b[$key] = helpful_clean($value);
		}
	}
	return $b;
}


/**
 * Does an explode, and then trims each element.
 *
 * @param string $delimiter
 * @param string $str
 *
 * @return array
 */
function helpful_explode_trim($delimiter, $str) {
	$foo = explode($delimiter, $str);
	$bar = array();
	foreach ($foo as $k => $v) {
		$bar[$k] = trim($v);
	}
	return $bar;
}



/**
 * Is this a valid phone number?
 *
 * @param string $phone
 * @param string $regex
 *		(optional) a different regex, if you want
 *
 * @return TRUE or FALSE
 */
function helpful_valid_phone($phone, $regex = '') {
	if ($regex == '') $regex = '/[^x0-9\+\s\(\)\-]/';
	$fone = preg_replace($regex, '', $phone);
	return $phone == $fone;
}


/**
 * Return the current date/time.
 *
 * @param string $format
 *		(optional) A format string from PHP's date() function
 *
 * @return int
 *		A unix timestamp
 */
function helpful_timestamp($format = 'm/d/Y h:i A') {
	return date($format);
}


/**
 * Builds a MySQL INSERT statement.
 *
 * @param string $table
 *		The table to INSERT into
 * @param array $data
 *		A key/value array of values to INSERT
 *
 * @return string
 *		The MySQL statement.
 */
function helpful_db_build_insert($table, $data) {

	$fields = array_keys($data);
	$values = array_values($data);
	
	$sql  = 'INSERT INTO `' . $table . '` ';
	
	$sql .= '(' . implode(', ', $fields) . ') ';
		
	$values2 = array();
	foreach ($values as $v) {
		$values2[] = '"' . db_escape_string($v) . '"';
	}
	
	$sql .= 'VALUES (' . implode(', ', $values2) . ') ';
	
	return $sql;

}


/**
 * Performs a MySQL INSERT statement and returns the unique id for that record.
 *
 * @param string $sql
 *		The INSERT statement
 *
 * @return int
 *		The LAST_INSERT_ID()
 */
function helpful_db_insert($sql) {
	db_query($sql);
	return db_result(db_query('SELECT LAST_INSERT_ID()'));
}


/**
 * Performs a MySQL INSERT statement and returns the unique id for that record.
 * This data is serialized() before insertion.
 *
 * @param string $table
 *		The table to INSERT into
 * @param array $data
 *		A key/value array of data to be inserted
 *
 * @return int
 *		The LAST_INSERT_ID()
 */
function helpful_db_insert_serialized($table, $data) {

	$fields = array_keys($data);

	$sql  = 'INSERT INTO ' . $table . ' ';
	$sql .= '(' . implode(', ', $fields) . ') ';
	
	$values = array();
	$args = array();
	foreach ($data as $key => $value) {
		$values[] = '"%s"';
		
		if (is_array($value)) {
			$args[] = serialize($value);
		} else {
			$args[] = $value;
		}
		
	}
	$sql .= 'VALUES (' . implode(', ', $values) . ') ';
		
	db_query($sql, $args);
	return db_result(db_query('SELECT LAST_INSERT_ID()'));

}


/**
 * Build a MySQL UPDATE statement.
 *
 * @param string $table
 *		The name of the table to be updated
 * @param string $keyfield
 *		The primary key field to use in the WHERE clause
 * @param string $keyvalue
 *		The value of $keyfield to use in the WHERE clause
 * @param array $data
 *		A key/value array of values to be updated
 *
 * @return string
 *		The MySQL UPDATE statement
 */
function helpful_db_build_update($table, $keyfield, $keyvalue, $data) {

	$fields = array_keys($data);
	$values = array_values($data);
	
	$sql  = 'UPDATE `' . $table . '` SET ';

	$values2 = array();
	foreach ($data as $key => $value) {
		$values2[] = $key . ' = "' . db_escape_string($value) . '"';
	}
	
	$sql .= implode(', ', $values2) . ' ';
	$sql .= 'WHERE ' . $keyfield . ' = "' . $keyvalue . '" ';
	
	return $sql;

}

/**
 * Build and execute a MySQL UPDATE statement,
 * the values of which are serialized.
 *
 * @param string $table
 *		The name of the table to be updated
 * @param string $keyfield
 *		The primary key field to use in the WHERE clause
 * @param string $keyvalue
 *		The value of $keyfield to use in the WHERE clause
 * @param array $data
 *		A key/value array of values to be updated
 */
function helpful_db_update_serialized($table, $keyfield, $keyvalue, $data) {

	$fields = array_keys($data);
	$values = array_values($data);
	
	$sql  = 'UPDATE `' . $table . '` SET ';

	$values = array();
	$args = array();
	foreach ($data as $key => $value) {
		$values[] = $key . ' = "%s"';
		
		if (is_array($value)) {
			$args[] = serialize($value);
		} else {
			$args[] = $value;
		}
		
	}
	$sql .= implode(', ', $values) . ' ';

	$sql .= 'WHERE ' . $keyfield . ' = "' . $keyvalue . '" ';
	
#	helpful_debug($sql); exit;
	
	db_query($sql, $args);


}

/**
* Check to see if a user has been assigned a certain role.
*
* @param string $role
*   The name of the role you're trying to find.
* @param object $user
*   The user object for the user you're checking; defaults to the current user.
*
* @return boolean
*   TRUE if the user object has the role, FALSE if it does not.
*/
function helpful_user_has_role($role, $user = NULL) {
  if ($user == NULL) {
    global $user;
  }

  if (is_array($user->roles) && in_array($role, array_values($user->roles))) {
    return TRUE;
  }

  return FALSE;
}


/**
 * Get the email address for a user.
 *
 * @param int $uid
 *
 * @return string
 */
function helpful_user_email($uid) {
	$sql = 'SELECT mail FROM users WHERE uid = ' . $uid;
	return db_result(db_query($sql));
}


/**
 * Build an array of countries. Meant for select options.
 * Keys are two character country codes. Except for USA and CAN.
 * Values are long form country names.
 *
 * @return array
 *		A key/value array
 */
function helpful_address_countries() {
	$countries = array(
		'' => 'Please Select',
		'USA' => 'United States',
		'CAN' => 'Canada',
#		'INT' => 'International'

			'AF' => 'Afganistan',
            'AL' => 'Albania',
            'DZ' => 'Algeria',
            'AS' => 'American Samoa',
            'AD' => 'Andorra', 
            'AO' => 'Angola',
            'AI' => 'Anguilla',
            'AQ' => 'Antarctica',
            'AG' => 'Antigua and Barbuda', 
            'AR' => 'Argentina', 
            'AM' => 'Armenia', 
            'AW' => 'Aruba', 
            'AU' => 'Australia', 
            'AT' => 'Austria', 
            'AZ' => 'Azerbaijan',
            'BS' => 'Bahamas', 
            'BH' => 'Bahrain', 
            'BD' => 'Bangladesh',
            'BB' => 'Barbados',
            'BY' => 'Belarus', 
            'BE' => 'Belgium', 
            'BZ' => 'Belize',
            'BJ' => 'Benin', 
            'BM' => 'Bermuda', 
            'BT' => 'Bhutan',
            'BO' => 'Bolivia', 
            'BA' => 'Bosnia and Herzegowina',
            'BW' => 'Botswana',
            'BV' => 'Bouvet Island', 
            'BR' => 'Brazil',
            'IO' => 'British Indian Ocean Territory',
            'BN' => 'Brunei Darussalam', 
            'BG' => 'Bulgaria',
            'BF' => 'Burkina Faso',
            'BI' => 'Burundi', 
            'KH' => 'Cambodia',
            'CM' => 'Cameroon',
#            'CA' => 'Canada',
            'CV' => 'Cape Verde',
            'KY' => 'Cayman Islands',
            'CF' => 'Central African Republic',
            'TD' => 'Chad',
            'CL' => 'Chile', 
            'CN' => 'China',
            'CX' => 'Christmas Island',    
            'CC' => 'Cocos (Keeling) Islands', 
            'CO' => 'Colombia',
            'KM' => 'Comoros', 
            'CG' => 'Congo', 
            'CD' => 'Congo, the Democratic Republic of the', 
            'CK' => 'Cook Islands',
            'CR' => 'Costa Rica',
            'CI' => 'Cote d\'Ivoire', 
            'HR' => 'Croatia (Hrvatska)',
            'CU' => 'Cuba',
            'CY' => 'Cyprus',
            'CZ' => 'Czech Republic',
            'DK' => 'Denmark', 
            'DJ' => 'Djibouti',
            'DM' => 'Dominica',
            'DO' => 'Dominican Republic',
            'TP' => 'East Timor',
            'EC' => 'Ecuador', 
            'EG' => 'Egypt', 
            'SV' => 'El Salvador', 
            'GQ' => 'Equatorial Guinea', 
            'ER' => 'Eritrea', 
            'EE' => 'Estonia', 
            'ET' => 'Ethiopia',
            'FK' => 'Falkland Islands (Malvinas)', 
            'FO' => 'Faroe Islands', 
            'FJ' => 'Fiji',
            'FI' => 'Finland',
            'FR' => 'France',
            'FX' => 'France, Metropolitan',
            'GF' => 'French Guiana', 
            'PF' => 'French Polynesia',
            'TF' => 'French Southern Territories', 
            'GA' => 'Gabon', 
            'GM' => 'Gambia',
            'GE' => 'Georgia', 
            'DE' => 'Germany', 
            'GH' => 'Ghana', 
            'GI' => 'Gibraltar', 
            'GR' => 'Greece',
            'GL' => 'Greenland', 
            'GD' => 'Grenada', 
            'GP' => 'Guadeloupe',
            'GU' => 'Guam',
            'GT' => 'Guatemala', 
            'GN' => 'Guinea',
            'GW' => 'Guinea-Bissau', 
            'GY' => 'Guyana',
            'HT' => 'Haiti', 
            'HM' => 'Heard and Mc Donald Islands', 
            'VA' => 'Holy See (Vatican City State)', 
            'HN' => 'Honduras',
            'HK' => 'Hong Kong', 
            'HU' => 'Hungary', 
            'IS' => 'Iceland', 
            'IN' => 'India', 
            'ID' => 'Indonesia', 
            'IR' => 'Iran (Islamic Republic of)',
            'IQ' => 'Iraq',
            'IE' => 'Ireland', 
            'IL' => 'Israel',
            'IT' => 'Italy', 
            'JM' => 'Jamaica', 
            'JP' => 'Japan',
            'JO' => 'Jordan',
            'KZ' => 'Kazakhstan',
            'KE' => 'Kenya', 
            'KI' => 'Kiribati',
            'KP' => 'Korea, Democratic People\'s Republic of',
            'KR' => 'Korea, Republic of',
            'KW' => 'Kuwait',
            'KG' => 'Kyrgyzstan',
            'LA' => 'Lao People\'s Democratic Republic',
            'LV' => 'Latvia',
            'LB' => 'Lebanon',
            'LS' => 'Lesotho', 
            'LR' => 'Liberia', 
            'LY' => 'Libyan Arab Jamahiriya',
            'LI' => 'Liechtenstein', 
            'LT' => 'Lithuania',
            'LU' => 'Luxembourg',
            'MO' => 'Macau', 
            'MK' => 'Macedonia, The Former Yugoslav Republic of',
            'MG' => 'Madagascar',
            'MW' => 'Malawi',
            'MY' => 'Malaysia',
            'MV' => 'Maldives',
            'ML' => 'Mali',
            'MT' => 'Malta',
            'MH' => 'Marshall Islands',
            'MQ' => 'Martinique',
            'MR' => 'Mauritania',
            'MU' => 'Mauritius',
            'YT' => 'Mayotte', 
            'MX' => 'Mexico',
            'FM' => 'Micronesia, Federated States of',
            'MD' => 'Moldova, Republic of',
            'MC' => 'Monaco',
            'MN' => 'Mongolia',
            'MS' => 'Montserrat',
            'MA' => 'Morocco',
            'MZ' => 'Mozambique',
            'MM' => 'Myanmar',
            'NA' => 'Namibia',
            'NR' => 'Nauru', 
            'NP' => 'Nepal', 
            'NL' => 'Netherlands',
            'AN' => 'Netherlands Antilles',
            'NC' => 'New Caledonia',
            'NZ' => 'New Zealand', 
            'NI' => 'Nicaragua', 
            'NE' => 'Niger', 
            'NG' => 'Nigeria', 
            'NU' => 'Niue',
            'NF' => 'Norfolk Island',
            'MP' => 'Northern Mariana Islands',
            'NO' => 'Norway',
            'OM' => 'Oman',
            'PK' => 'Pakistan',
            'PW' => 'Palau',
            'PA' => 'Panama',
            'PG' => 'Papua New Guinea',
            'PY' => 'Paraguay',
            'PE' => 'Peru',
            'PH' => 'Philippines',
            'PN' => 'Pitcairn',
            'PL' => 'Poland',
            'PT' => 'Portugal',
            'PR' => 'Puerto Rico',
            'QA' => 'Qatar',
            'RE' => 'Reunion',
            'RO' => 'Romania',
            'RU' => 'Russian Federation',
            'RW' => 'Rwanda',
            'KN' => 'Saint Kitts and Nevis', 
            'LC' => 'Saint LUCIA', 
            'VC' => 'Saint Vincent and the Grenadines',
            'WS' => 'Samoa', 
            'SM' => 'San Marino',
            'ST' => 'Sao Tome and Principe',
            'SA' => 'Saudi Arabia',
            'SN' => 'Senegal',
            'SC' => 'Seychelles',
            'SL' => 'Sierra Leone',
            'SG' => 'Singapore', 
            'SK' => 'Slovakia (Slovak Republic)',
            'SI' => 'Slovenia',
            'SB' => 'Solomon Islands',
            'SO' => 'Somalia', 
            'ZA' => 'South Africa',
            'GS' => 'South Georgia and the South Sandwich Islands',
            'ES' => 'Spain',
            'LK' => 'Sri Lanka',
            'SH' => 'St. Helena',
            'PM' => 'St. Pierre and Miquelon', 
            'SD' => 'Sudan', 
            'SR' => 'Suriname',
            'SJ' => 'Svalbard and Jan Mayen Islands',
            'SZ' => 'Swaziland', 
            'SE' => 'Sweden',
            'CH' => 'Switzerland', 
            'SY' => 'Syrian Arab Republic',
            'TW' => 'Taiwan, Province of China',
            'TJ' => 'Tajikistan',
            'TZ' => 'Tanzania, United Republic of',
            'TH' => 'Thailand',
            'TG' => 'Togo',
            'TK' => 'Tokelau',
            'TO' => 'Tonga', 
            'TT' => 'Trinidad and Tobago', 
            'TN' => 'Tunisia', 
            'TR' => 'Turkey',
            'TM' => 'Turkmenistan',
            'TC' => 'Turks and Caicos Islands',
            'TV' => 'Tuvalu',
            'UG' => 'Uganda',
            'UA' => 'Ukraine',
            'AE' => 'United Arab Emirates',
            'GB' => 'United Kingdom',
#            'US' => 'United States',
            'UM' => 'United States Minor Outlying Islands',
            'UY' => 'Uruguay', 
            'UZ' => 'Uzbekistan',
            'VU' => 'Vanuatu', 
            'VE' => 'Venezuela',
            'VN' => 'Viet Nam',
            'VG' => 'Virgin Islands (British)',
            'VI' => 'Virgin Islands (U.S.)', 
            'WF' => 'Wallis and Futuna Islands', 
            'EH' => 'Western Sahara',
            'YE' => 'Yemen', 
            'YU' => 'Yugoslavia',
            'ZM' => 'Zambia',
            'ZW' => 'Zimbabwe' 

	);
	return $countries;
}


/**
 * Build an array of American territories. Meant for select options.
 * Keys are two character codes.
 * Values are long form names.
 *
 * @return array
 *		A key/value array
 */
function helpful_address_territories() {
	$foo = array(
		'AS' => "American Samoa",
		'FM' => 'Federated States of Micronesia',
		'GU' => "Guam",
		'MH' => 'Marshall Islands',
		'MP' => "Marianas Islands",
		'PR' => "Puerto Rico",
		'PW' => 'Palau',
		'VI' => "US Virgin Islands"
	);
	return $foo;
}


/**
 * Build an array of Canadian provinces. Meant for select options.
 * Keys are two character codes.
 * Values are long form names.
 *
 * @return array
 *		A key/value array
 */
function helpful_address_provinces() {
	$foo = array(
		'AB' => "Alberta",
		'BC' => "British Columbia",
		'MB' => "Manitoba",
		'NB' => "New Brunswick",
		'NL' => "Newfoundland",
		'NT' => "Northwest Territories",
		'NU' => 'Nunavut',
		'NS' => "Nova Scotia",
		'ON' => "Ontario",
		'PE' => 'Prince Edward Island',
		'QC' => "Quebec",
		'SK' => "Saskatchewan",
		'YT' => "Yukon"
	);
	return $foo;
}


/**
 * Build an array of American states. Meant for select options.
 * Keys are two character codes.
 * Values are long form names.
 *
 * @return array
 *		A key/value array
 */
function helpful_address_states() {
	$state_list = array(
				'AL'=>"Alabama",
                'AK'=>"Alaska", 
                'AZ'=>"Arizona", 
                'AR'=>"Arkansas", 
                'CA'=>"California", 
                'CO'=>"Colorado", 
                'CT'=>"Connecticut", 
                'DE'=>"Delaware", 
                'DC'=>"District Of Columbia", 
                'FL'=>"Florida", 
                'GA'=>"Georgia", 
                'HI'=>"Hawaii", 
                'ID'=>"Idaho", 
                'IL'=>"Illinois", 
                'IN'=>"Indiana", 
                'IA'=>"Iowa", 
                'KS'=>"Kansas", 
                'KY'=>"Kentucky", 
                'LA'=>"Louisiana", 
                'ME'=>"Maine", 
                'MD'=>"Maryland", 
                'MA'=>"Massachusetts", 
                'MI'=>"Michigan", 
                'MN'=>"Minnesota", 
                'MS'=>"Mississippi", 
                'MO'=>"Missouri", 
                'MT'=>"Montana",
                'NE'=>"Nebraska",
                'NV'=>"Nevada",
                'NH'=>"New Hampshire",
                'NJ'=>"New Jersey",
                'NM'=>"New Mexico",
                'NY'=>"New York",
                'NC'=>"North Carolina",
                'ND'=>"North Dakota",
                'OH'=>"Ohio", 
                'OK'=>"Oklahoma", 
                'OR'=>"Oregon", 
                'PA'=>"Pennsylvania", 
                'RI'=>"Rhode Island", 
                'SC'=>"South Carolina", 
                'SD'=>"South Dakota",
                'TN'=>"Tennessee", 
                'TX'=>"Texas", 
                'UT'=>"Utah", 
                'VT'=>"Vermont", 
                'VA'=>"Virginia", 
                'WA'=>"Washington", 
                'WV'=>"West Virginia", 
                'WI'=>"Wisconsin", 
                'WY'=>"Wyoming");
	return $state_list;
}


/**
 * Build an array of states, territories, and provinces.
 * Meant for select options.
 * Keys are two character codes.
 * Values are long form names.
 *
 * @return array
 *		A key/value array
 */
function helpful_address_states_all() {
	$states = helpful_address_states();
	$provis = helpful_address_provinces();
	$terris = helpful_address_territories();
	return array_merge($states, array('X1' => '--'), $provis, array('X2' => '--'), $terris);
}


/**
 * Does one string contain another? A shortcut for strpos()
 *
 * @param string $haystack
 *		The string you are looking in
 * @param string $needle
 *		The string you are looking for
 *
 * @return boolean
 *		TRUE or FALSE
 */
function helpful_str_contains($haystack, $needle) {
	$pos = strpos($haystack, $needle);
	if ($pos !== false) return true;
	return false;
}


/**
 * Does one string begin with another?
 *
 * @param string $haystack
 *		The string you are looking in
 * @param string $needle
 *		The string you are looking for
 *
 * @return boolean
 *		TRUE or FALSE
 */
function helpful_str_begins_with($haystack, $needle) {
	$needle_len = strlen($needle);
	if (substr($haystack, 0, $needle_len) == $needle) return true;
	return false;
}


/**
 * Does one string end with another?
 *
 * @param string $haystack
 *		The string you are looking in
 * @param string $needle
 *		The string you are looking for
 *
 * @return boolean
 *		TRUE or FALSE
 */
function helpful_str_ends_with($haystack, $needle) {
	$haystack_len = strlen($haystack);
	$needle_len = strlen($needle);
	if (substr($haystack, $haystack_len - $needle_len) == $needle) return true;
	return false;
}


/**
 * Extract a string from another.
 *
 * @param string $haystack the string you are searching in
 * @param string $start the beginning of the string you are searching for
 * @param string $end the end of the string you are searching for
 * @param boolean $include_start_end (optional)
 *
 * @return string|false
 */
function helpful_str_extract($haystack, $start, $end, $include_start_end = true) {
	$x_start = strpos($haystack, $start);
#	var_dump($x_start);
	if ($x_start === false) return false;
	
	$x_end = strpos($haystack, $end, $x_start + strlen($start) + 1);
#	var_dump($x_end);
	if ($x_end === false) return false;
	
	if ($include_start_end) {
		$a = $x_start;
		$b = $x_end + strlen($end) - $x_start;
	} else {
		$a = $x_start + strlen($start);
		$b = $x_end - $a;
	}

	$x = substr($haystack, $a, $b);
	return $x;
}


/**
 * Given a string of who knows what, remove anything that is not part of a number.
 *
 * @param string $v
 *
 * @return float
 */
function helpful_str_to_number($v) {
	$v = preg_replace('/[^0-9\.]/', '', $v);
	return (float)$v;
}


/**
 * Given a key/value array, return an array without a specified key/value pair.
 *
 * @param string $i
 *		The key (and value) to drop
 * @param array $a
 *		The array
 *
 * @return array
 *		The key/value array without $i
 */
function helpful_array_drop($i, $a) {
	$b = array();
	foreach ($a as $k => $v) {
		if ($k == $i) continue;
		$b[] = $v;
	}
	return $b;
}


/**
 * Build an HTML table from a key/value array.
 *
 * @param array $data
 *		The key/value array
 * @param boolean $include_headers
 *		(optional) Include column headers?
 * @param string $table_class
 *		(optional) CSS class for the table.
 * @param array $ignore_columns
 *		(optiona) An array of columns (keys) to skip
 *
 * @return string
 *		HTML
 */
function helpful_array_to_table($data, $include_headers = true, $table_class = 'helpful', $ignore_columns = array()) {

	if (count($data) == 0) return '';

	$output = '<table class="' . $table_class . '" border="0" cellspacing="0" cellpadding="0">' . chr(10);
	
	$headers = array_keys($data[0]);
	if (in_array('attributes', $headers)) {
		$headers = helpful_array_drop(array_search('attributes', $headers), $headers);
	}
	
	if ($include_headers) {
		$output .= '<thead><tr>';
		foreach ($headers as $j => $header) {
			if (in_array($header, $ignore_columns)) continue;
			$output .= '<th';
			if ($j == 0) $output .= ' class="first"';
			if ($j == count($headers) - 1) $output .= ' class="last"';
			$output .= '>' . $header . '</th>';
		}
		$output .= '</tr></thead>' . chr(10);
	}
	
	$output .= '<tbody>';
	
	foreach ($data as $i => $row) {
	
		$attributes = array();
		if (array_key_exists('attributes', $row)) {
			$attributes = $row['attributes'];
			unset($row['attributes']);
		}

		$output .= '<tr';
		if ($i % 2 == 1) $output .= ' class="odd"';
		foreach ($attributes as $key => $values) {
			$output .= ' ' . $key . '="';
			if (is_array($values)) {
				$output .= implode(" ", $values);
			} else {
				$output .= $values;
			}
			$output .= '"';
		}
		$output .= '>';
		
		foreach ($row as $j => $c) {
			if (in_array($j, $ignore_columns)) continue;
			$output .= '<td valign="top"';
			if ($j == $headers[0]) $output .= ' class="first"';
			if ($j == end($headers)) $output .= ' class="last"';
			$output .= '>' . $c . '</td>';
		}
		
		$output .= '</tr>' . chr(10);
	}
	
	$output .= '</tbody>';
	$output .= '</table>' . chr(10);
	
	return $output;

}

/**
 * Turn a key/value array into an HTML table. Column headers are sortable.
 *
 * sortable_columns should look something like
 * 'Column Header' => 'db_column'
 * so you can do something like
 * 'Name' => 'name'
 * or
 * 'Name' => 'last_name'
 *
 * @param array $data
 *		The key/value array
 * @param array $sortable_columns
 *		An array of columns (keys) that will be sortable
 *
 * @return string
 *		HTML
*/
function helpful_array_to_sortable_table($data, $sortable_columns = array()) {

	if (count($data) == 0) return '';
	
	$sort = '';
	if (array_key_exists('sort', $_GET)) {
		$sort = helpful_clean($_GET['sort']);
	}
	$sort = array_search($sort, $sortable_columns);

	$output = '<table class="helpful" border="0" cellspacing="0" cellpadding="0">' . chr(10);
	
	$headers = array_keys($data[0]);
	
	$output .= '<thead><tr>';
	foreach ($headers as $j => $header) {
		$output .= '<th';
		
		$classes = array();
		
		if ($j == 0) $classes[] = 'first';
		if ($j == count($headers) - 1) $classes[] = 'last';
		if ($header == $sort) $classes[] = 'current-sort';
		
		if (count($classes) > 0) {
			$output .= ' class="' . implode(' ', $classes) . '"';
		}
		
		$output .= '>';
		if (array_key_exists($header, $sortable_columns)) {
			$output .= '<a href="?sort=' . $sortable_columns[$header] . '">' . $header . '</a>';
		} else {
			$output .= $header;
		}
		$output .= '</th>';
	}
	$output .= '</tr></thead>' . chr(10);
	
	$output .= '<tbody>';
	
	foreach ($data as $i => $row) {

		$output .= '<tr';
		if ($i % 2 == 1) $output .= ' class="odd"';
		$output .= '>';
		
		foreach ($row as $j => $c) {
			$output .= '<td valign="top"';
			
			$classes = array();
			
			if ($j == $headers[0]) $classes[] = 'first';
			if ($j == end($headers)) $classes[] = 'last';
			if ($j == $sort) $classes[] = 'current-sort';
			
			if (count($classes) > 0) {
				$output .= ' class="' . implode(' ', $classes) . '"';
			}
			
			$output .= '>' . $c . '</td>';
		}
		
		$output .= '</tr>' . chr(10);
	}
	
	$output .= '</tbody>';
	$output .= '</table>' . chr(10);
	
	return $output;

}


/**
 * Create the HTML for "action" icons for a table.
 * These include Print, PDF, and CSV.
 * Each icon, when clicked, will call a javascript function
 * of the same name.
 *
 * @param array $icons
 *		(optional) The icons you want, if empty defaults to all
 * @param string $prefix
 *		(optional) If supplied, javascript function are given this prefix
 *
 * @return string
 *		HTML
 */
function helpful_table_icons($icons = array(), $prefix = '') {
	if (count($icons) == 0) {
		$icons = array('print', 'pdf', 'csv');
	}
	
	$output  = '<div class="table-icons">';
	
	if (in_array('print', $icons)) {
		$output .= '<div class="table-icon">';
		$output .= '<a href="javascript:print();">';
		$output .= '<img alt="Print" src="/modules/acquia/print/icons/print_icon.gif" height="16" width="16" />';
		$output .= '</a>';
		$output .= '</div>';
	}

	if (in_array('pdf', $icons)) {
		$output .= '<div class="table-icon">';
		$output .= '<a href="javascript:';
		if ($prefix != '') $output .= $prefix . '_';
		$output .= 'pdf();">';
		$output .= '<img alt="PDF" src="/modules/acquia/print/icons/pdf_icon.gif" height="16" width="16" />';
		$output .= '</a>';
		$output .= '</div>';
	}
	
	if (in_array('csv', $icons)) {
		$output .= '<div class="table-icon">';
		$output .= '<a href="javascript:';
		if ($prefix != '') $output .= $prefix . '_';
		$output .= 'csv();">';
		$output .= '<img alt="CSV" src="/' . path_to_theme() . '/images/table_48.png" height="16" width="16" />';
		$output .= '</a>';
		$output .= '</div>';
	}
		
	$output .= '</div>';
	return $output;
}


/**
 * Render an array as a string. Similar to var_dump().
 *
 * @param array $data
 *		The array to render
 * @param int $depth
 *		(optional) Used for indenting
 *
 * @return string
 *		The array as a string
 */
function helpful_array_to_string($data, $depth = 0) {
	$str = '';
	
	foreach ($data as $key => $value) {
	
		if ($depth > 0) {
			$str .= str_repeat(' ', $depth * 3);
		}
		
		$str .= $key . ' => ';
		
		if (!is_array($value)) {
			$str .= $value;
		} else {
			$str .= chr(10);
			$str .= helpful_array_to_string($value, $depth + 1);
		}
		
		$str .= chr(10);
	
	}

	return $str;
}


/**
 * Given a module, loads a CSS file for that module.
 *
 * @param string $module
 *		The name of the module the file is part of
 * @param string $filename
 *		(optional) The name of the CSS file, if different than $module (omit extension)
 *
 * @return string
 *		HTML link tag
 */
function helpful_load_css($module, $filename = '') {
	if ($filename == '') $filename = $module;
	return '<link rel="stylesheet" type="text/css" href="/' . drupal_get_path('module', $module) . '/' . $filename . '.css">';
}


/**
 * Given a module, loads a javascript file for that module.
 *
 * @param string $module
 *		The name of the module the file is part of
 * @param string $filename
 *		(optional) The name of the javascript file, if different than $module (omit extension)
 *
 * @return string
 *		HTML script tag
 */
function helpful_load_js($module, $filename = '') {
	if ($filename == '') $filename = $module;
	return '<script type="text/javascript" src="/' . drupal_get_path('module', $module) . '/' . $filename . '.js"></script>';
}


/**
 * Given an list of jQuery UI libraries, load them.
 * Will load core, widget and theme automatically.
 * Omit .min.js from the end of the filenames.
 *
 * @param array $files
 *		An array of jQuery UI libraries to load
 *
 * @return string
 *		HTML script tags
 */
function helpful_jquery_ui($files = array()) {

	$lib = '/sites/all/libraries/jquery.ui/ui/minified/';
	$css = '/sites/all/libraries/jquery.ui/themes/humanity/';
	
	$html  = '<script type="text/javascript" src="' . $lib . 'jquery.ui.core.min.js"></script>';
	$html .= '<link rel="stylesheet" type="text/css" href="' . $css . 'jquery-ui-1.8.18.custom.css" />';
	
	if (count($files)) {
		$html .= '<script type="text/javascript" src="' . $lib . 'jquery.ui.widget.min.js"></script>';
	}
	
	foreach ($files as $f) {
		$html .= '<script type="text/javascript" src="' . $lib . $f . '.min.js"></script>';
		$html .= '<link rel="stylesheet" type="text/css" href="' . $css . $f . '.css" />';
	}
	
	return $html;
}


/**
 * Simple javascript confirmation for delete buttons.
 *
 * @param string $type
 *		(optional) The "type" of thing you might be deleting
 *
 * @return javascript string
 */
function helpful_js_delete_confirm($type = 'record') {
	return 'return confirm("Are you sure you want to delete this ' . $type . '?");';
}


/**
 * Detemine the current page, based on $_GET['page']
 *
 * @return int
 *		The current page.
 */
function helpful_current_page() {
	$page = 1;
	if (array_key_exists('page', $_GET)) {
		$page = trim(strip_tags($_GET['page']));
		if (!is_numeric($page)) $page = 1;
	}
	return $page;
}


/**
 * Set up HTML for pagination.
 * DIV id is "helpful_paging"
 *
 * @param int $current_page
 *		The current page
 * @param int $per_page
 *		How many results per page
 * @param int $total_items
 *		Total number of results
 * @param int $window_size
 *		If there are more than 10 pages, page numbers are broken up. This is the number to the left+right you want to display.
 *
 * @return string
 *		HTML
 */
function helpful_paging($current_page, $per_page, $total_items, $window_size = 2) {

	$total_pages = ceil($total_items / $per_page);
	$bare_url = current(explode("?", $_SERVER['REQUEST_URI']));
	
	$output = '<div id="' . __FUNCTION__ . '">';
	$output .= $total_items . ' results. ';
	$output .= 'Viewing page ' . $current_page . ' of ' . $total_pages . '.';

	if ($total_pages > 1) {
	
		$output .= '<ul>';

		if ($current_page > 1) {
			$output .= '<li class="previous"><a href="?page=' . ($current_page - 1) . '">Previous</a></li>';
		}

		
		if ($total_pages < 11) { // simpler
			
			for ($p = 1; $p <= $total_pages; $p++) {
				$output .= '<li';
				if ($p == $current_page) $output .= ' class="current"';
				$output .= '><a href="?page=' . $p . '">' . $p . '</a></li>';
			}			

		} else { // cut down
		
			$p_disp = array($current_page);
			for ($w = 1; $w <= ($window_size * 2) + 1; $w++) {
				$p_disp[] = $w;
			}
			if ($current_page > $window_size && $current_page < ($total_pages - $window_size)) {
				for ($w = 0; $w <= $window_size; $w++) {
					$p_disp[] = $current_page - $w;
					$p_disp[] = $current_page + $w;
				}			
			}
			for ($w = 0; $w <= ($window_size * 2) + 1; $w++) {
				$p_disp[] = $total_pages - $w;
			}
			sort($p_disp);
			$p_disp = array_unique($p_disp);

			$lastp = 0;
			foreach ($p_disp as $p) {
				if ($p != $lastp + 1) {
					$output .= '<li>...</li>';
				}
				$output .= '<li';
				if ($p == $current_page) $output .= ' class="current"';
				$output .= '><a href="?page=' . $p . '">' . $p . '</a></li>';
				$lastp = $p;
			}						
		
		}

		if ($current_page < $total_pages) {
			$output .= '<li class="next"><a href="?page=' . ($current_page + 1) . '">Next</a></li>';
		}

		
		$output .= '</ul>';

	}
	
	$output .= '</div>';

	return $output;
	
}


/**
 * Build HTML options for helpful_address_states() and
 * helpful_address_territories().
 * Echoes output and exits.
 * Meant for AJAX.
 */
function helpful_form_states() {
	$output = '';
	$states = array_merge(helpful_address_states(), helpful_address_territories());
	ksort($states);
	foreach ($states as $abbr => $state) {
		$output .= '<option value="' . $abbr . '">' . $state . '</option>' . chr(10);
	}
	echo $output; exit;
}


/**
 * Build HTML options for helpful_address_provinces().
 * Echoes output and exits.
 * Meant for AJAX.
 */
function helpful_form_provinces() {
	$output = '';
	$states = helpful_address_provinces();
	foreach ($states as $abbr => $state) {
		$output .= '<option value="' . $abbr . '">' . $state . '</option>' . chr(10);
	}
	echo $output; exit;
}


/**
 * Given an array of "checkboxes" return an array of
 * key/value pairs that are checked.
 *
 * @param array $checkboxes
 *		The checkboxes from a POST
 *
 * @return array
 *		A key/value array of checked values
 */
function helpful_form_checkboxes_to_array($checkboxes) {
	$a = array();
	foreach ($checkboxes as $key => $value) {
		if ($value) $a[$key] = $value;
	}
	return $a;
}


/**
 * Given a form in array form, return the value of a specified field.
 *
 * @param array $data
 *		The form as an array
 * @param string $fieldname
 *		The field you want the value of
 *
 * @return string
 *		The value of the field, or an empty string
 */
function helpful_form_default_value($data, $fieldname) {
	if (!array_key_exists($fieldname, $data)) return '';	
	if ($data[$fieldname]) return $data[$fieldname];
	return '';
}


/**
 * Given a string, make an html "safe" version you could use for an id attribute.
 *
 * @param string $text
 *
 * @return string
 */
function helpful_clean_id($text) {
	return strtolower(form_clean_id($text));
}


/**
 * Build a file upload for a form.
 *
 * @param string $label
 * @param boolean $required
 *		(optional)
 * @param array $args
 *		(optional) additional arguments
 *
 * @return array
 */
function helpful_form_file_field($label, $required = false, $args = array()) {
	$field = array(
		'#title' => $label,
		'#type' => 'upload_element',
		'#required' => $required,
		'#size' => 10,
		'#weight' => 0
	);
	foreach ($args as $k => $v) {
		if ($k == 'type') continue;
		$field['#' . $k] = $v;
	}
	return $field;
}

/**
 * Assuming a field already has a file uploaded to it, display a download link.
 *
 * @param int $fid
 * @param string $label
 * @param string $type
 *		(optional) content type / prefix
 *
 * @return array for Drupal Forms API
 */
function helpful_form_file_download($fid, $label, $type = '') {
	$file_attrs = helpful_file_attributes($fid);
	
	$key = $label;
	if ($type != '') $key = $type . ' ' . $label;
	
	$file_html  = '<div id="edit-' . helpful_clean_id($key) . '-upload" class="form-item">';
#	$file_html .= '<label>' . $label . ':</label>';
	$file_html .= '<a href="/' . $file_attrs['filepath'] . '">' . $file_attrs['filename'] . '</a>';
	$file_html .= '<br />' . format_size($file_attrs['filesize']);
	$file_html .= '</div>';
		
	return array(
		'#type' => 'markup',
		'#value' => $file_html,
	);
}

/**
 * Assuming a field already has a file uploaded to it, build a hidden field with the fid in it.
 *
 * @param int $fid
 *
 * @return array for Drupal Forms API
 */
function helpful_form_file_hidden($fid) {
	return array(
		'#type' => 'hidden',
		'#value' => $fid
	);
}


/**
 * Upload a file from a form.
 *
 * @param string $fieldname
 *		The upload file field name
 * @param string $label
 *		A user friendly version of the field name
 *
 * @return file object if it's okay or FALSE if it failed
 */
function helpful_form_file_upload($fieldname, $label) {
	$ok = false;
	if (isset($_FILES['files']) && is_uploaded_file($_FILES['files']['tmp_name'][$fieldname])) {

	    // attempt to save the uploaded file
		$file = upload_element_save($_FILES['files']['tmp_name'][$fieldname], file_directory_path());
	
	    // set error if file was not uploaded
	    if (!$file) {
			form_set_error($fieldname, 'Error uploading file for ' . $label);
	    } else {
	    	$ok = $file;
	    }
	       	       
	}
	else {
		form_set_error($fieldname, 'You must upload a file for ' . $label);
		if (!isset($_FILES['files'])) drupal_set_message('FILES is not set');
		if (!is_uploaded_file($_FILES['files']['tmp_name'][$fieldname])) drupal_set_message($fieldname . ' is not an uploaded file');
	}
	return $ok;
}



/**
 * Build me a nice little cancel button for Forms API.
 *
 * @param string $url where to go when Cancel is clicked
 *
 * @return array
 */
function helpful_form_cancel($url) {
	$cancel_button  = '<button type="button" class="nabcepbutton" ';
	$cancel_button .= 'onclick="javascript:goURL(\'' . $url . '\');"';
	$cancel_button .= '>Cancel</button>';
	return array('#value' => $cancel_button);
}



/**
 * Tell me some useful information about a record in the files table.
 *
 * @param int $fid
 *
 * @return array
 */
function helpful_file_attributes($fid) {
	$sql = 'SELECT * FROM files WHERE fid = "' . $fid . '"';
	$attrs = db_fetch_array(db_query($sql));
	$attrs['file_exists'] = file_exists($_SERVER['DOCUMENT_ROOT'] .'/'. $attrs['filepath']);
	return $attrs;
}


/**
 * Delete a file from the filesystem and from the files table.
 *
 * @param string|int $path
 *		Either a string file path, or an int fid
 *
 * @return TRUE or FALSE
 */
function helpful_file_delete($path) {

	if (is_numeric($path)) {
		$path = db_result(db_query('SELECT filepath FROM {files} WHERE fid = "' . $path . '"'));
	}
	
	$success = file_delete($path);
	if ($success) {
		db_query('DELETE FROM {files} WHERE filepath = "%s"', $path);
	}
	return $success;
}


/**
 * Is this field "markup" ?
 *
 * @param string $field_name
 *		The field you are checking
 * @param string $type
 *		The content type this field appears on
 *
 * @return boolean
 *		TRUE if this field is "markup" or FALSE if it's not
 */
function helpful_field_is_markup($field_name, $type) {
	$content_field = content_fields($field_name, $type);
	return $content_field['type'] == 'markup';
}


/**
 * Does this field have a value?
 *
 * @param string $field_name
 *		The field you are checking
 * @param array $field_info
 *		An array of field information from the node
 * @param string $type
 *		The content type of this field
 *
 * @return boolean
 *		TRUE if this field has a non-empty value
 */
function helpful_field_has_value($field_name, $field_info, $type) {

	// first we need to find out what type of field this is
	// then we can look in the right place
	// to determine whether or not this is empty
	
	$content_field = content_fields($field_name, $type);
	
	if ($content_field['type'] == 'filefield') {
		$value = trim($field_info[0]['filepath']);
		if ($value != '') return true;
	}

	if ($content_field['type'] == 'text') {
		$value = trim($field_info[0]['value']);
		if ($value != '') return true;
	}
	
	if ($content_field['type'] == 'markup') {
		return true;
	}
	
	return false;

}


/**
 * Given a content type and a step number, what is the label?
 * For example, Step 1 is "Organization Info"
 *
 * @param string $type
 *		The content type
 * @param int $step
 *		The step number
 *
 * @return string
 *		The label for $step
 */
function helpful_multistep_step_label($type, $step) {
	
	$multisteps = array();
	
	$groups = fieldgroup_groups($type);
	foreach ($groups as $key => $group) {
		if ($group['settings']['multistep']['block']) {
			$multisteps[] = $group;
		}
	}
	
	return $multisteps[$step - 1]['label'];

}


/**
 * What was the last (not current) workflow state of this node?
 *
 * @param int $nid
 *		The node id
 *
 * @return int
 *		The state id
 */
function helpful_workflow_node_last_state($nid) {
	$sql  = 'SELECT old_sid FROM workflow_node_history WHERE nid = "' . $nid . '"';
	$sql .= 'ORDER BY stamp DESC ';
	$sql .= 'LIMIT 1';
	$row  = db_fetch_array(db_query($sql));
	return $row['old_sid'];
}


/**
 * Given a node id, what user id authored it?
 *
 * @param int $nid
 *		The node id
 *
 * @return int
 *		The user id
 */
function helpful_get_node_uid($nid) {
	$sql = 'SELECT uid FROM node WHERE nid = "' . $nid . '"';
	return db_result(db_query($sql));
}


/**
 * Build an array of months.
 * Keys are zero-padded digits (03, 12).
 * Values are long form (March, December).
 *
 * @return array
 *		A key/value array
 */
function helpful_select_months() {
	$m = array();
	$m['01'] = 'January';
	$m['02'] = 'February';
	$m['03'] = 'March';
	$m['04'] = 'April';
	$m['05'] = 'May';
	$m['06'] = 'June';
	$m['07'] = 'July';
	$m['08'] = 'August';
	$m['09'] = 'September';
	$m['10'] = 'October';
	$m['11'] = 'November';
	$m['12'] = 'December';
	return $m;
}


/**
 * Build an array of years.
 * Start with the current year.
 * Stop a specified number of years in the future.
 *
 * @param int $limit
 *		(optional) The number of years into the future
 *
 * @return array
 *		A key/value array
 */
function helpful_select_years($limit = 7) {
	$y = array();
	
	for ($i = 0; $i <= $limit; $i++) {
		$year = date('Y', strtotime('+' . $i . ' years'));
		$y[$year] = $year;
	}
	
	return $y;
}


/**
 * Calls helpful_debug on $_GET and $_POST and exits.
 */
function helpful_testcurl() {

	helpful_debug($_GET, 'get');
	helpful_debug($_POST, 'post');
	exit;

}


/**
 * Return the string representation of a boolean value.
 * If the value is true, the string "true" will be returned.
 *
 * @param boolean $v
 *		A value
 *
 * @return string
 *		'true' or 'false'
 */
function helpful_boolean($v) {
	return $v ? 'true' : 'false';
}


/**
 * Return a list of all users with a specified role.
 *
 * @param int $role_id
 *		The role id
 * @param boolean $include_empty_option
 *		(optional) An empty key/value pair
 *
 * @return array
 *		An array of user ids and names
 */
function helpful_get_users($role_id, $include_empty_option = false) {
	// return a list of all users with the specified role
	
	$users = array();
	
	if ($include_empty_option) {
		$users[''] = 'Select';
	}
	
	$sql  = 'SELECT users.uid AS uid, users.name AS users_name ';
	$sql .= 'FROM users ';
	$sql .= 'INNER JOIN users_roles users_roles ON users.uid = users_roles.uid ';
	$sql .= 'WHERE users_roles.rid = ' . $role_id . ' ';
	$sql .= 'ORDER BY users.uid ';
	$res  = db_query($sql);
	while ($row = db_fetch_array($res)) {
		$users[$row['uid']] = $row['users_name'];
	}
	return $users;
}


/**
 * What is this user id's user name?
 *
 * @param int $uid
 *		The user id
 *
 * @return string
 *		The user name
 */
function helpful_get_username($uid) {
	$sql = 'SELECT name FROM users WHERE uid = "' . $uid . '" ';
	$username = db_result(db_query($sql));
	if ($username == '' || $username === false) return 'None';
	return $username;
}


/**
 * Return Drupal's URL arguments as an array.
 * If the URL were /one/two/three/four
 * and you called helpful_arg_array(0, 1, 2)
 * you would get array("one", "two", "three")
 * if you called helpful_arg_array(2)
 * you would get array("three")
 *
 * @return array
 *		Drupal URL arguments as an array
 */
function helpful_arg_array() {
	$indexes = func_get_args();	
	$foo = array();
	foreach ($indexes as $i) {
		$arg = arg($i);
		if (isset($arg)) $foo[] = $arg;
	}
	return $foo;
}


/**
 * For use in hook_views_data. Set up a field.
 *
 * @param array $args
 * - title: the title of this field (user friendly)
 * - help: a description (optional)
 * - field: field handler (optional)
 * - filter: filter handler (optional)
 * - sort: sort handler (optional)
 *
 * @return array
 */
function helpful_views_data_field($args = array()) {

	$defaults = array(
		'field' => array(
			'handler' => 'views_handler_field',
			'click sortable' => TRUE,
		),
		'filter' => array(
			'handler' => 'views_handler_filter_string',
		),
		'sort' => array(
			'handler' => 'views_handler_sort',
		)
	);

	return array_merge($defaults, $args);

}



/**
 * Figure out what our domain name is
 *
 * @return string
 */
function helpful_domain_name() {
	return $_SERVER['HTTP_HOST'];
}


/**
 * Headers for Email.
 *
 * @param string $name
 *
 * @return string
 */
function helpful_email_headers($name = 'Chad Wolf') {
	$headers  = "From: " . $name . " <mynabcep@nabcep.org>\r\n";
	$headers .= "Content-Type: text/html; charset=UTF-8; format=flowed\r\n";
	return $headers;
}

